/*
 * PROJECT:     SupernovaX SDK
 * LICENSE:     MIT (https://spdx.org/licenses/MIT)
 * PURPOSE:     D3D11 Shader interface
 * COPYRIGHT:   Copyright 2024 Christian Rendina <pizzaiolo100@proton.me>
 * REFERENCE:
 * - Wine d3d11shader.h
 */
import "oaidl.idl";
import "ocidl.idl";
import "d3dcommon.idl";

cpp_quote("#ifndef D3D_COMPILER_VERSION")
cpp_quote("#define D3D_COMPILER_VERSION 47")
cpp_quote("#endif")


typedef struct _D3D11_SHADER_DESC
{
    UINT Version;
    const char *Creator;
    UINT Flags;
    UINT ConstantBuffers;
    UINT BoundResources;
    UINT InputParameters;
    UINT OutputParameters;
    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT CutInstructionCount;
    UINT EmitInstructionCount;
    D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
    UINT GSMaxOutputVertexCount;
    D3D_PRIMITIVE InputPrimitive;
    UINT PatchConstantParameters;
    UINT cGSInstanceCount;
    UINT cControlPoints;
    D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
    D3D_TESSELLATOR_PARTITIONING HSPartitioning;
    D3D_TESSELLATOR_DOMAIN TessellatorDomain;
    UINT cBarrierInstructions;
    UINT cInterlockedInstructions;
    UINT cTextureStoreInstructions;
} D3D11_SHADER_DESC;

typedef struct _D3D11_SHADER_VARIABLE_DESC
{
    const char *Name;
    UINT StartOffset;
    UINT Size;
    UINT uFlags;
    void *DefaultValue;
    UINT StartTexture;
    UINT TextureSize;
    UINT StartSampler;
    UINT SamplerSize;
} D3D11_SHADER_VARIABLE_DESC;

typedef struct _D3D11_SHADER_TYPE_DESC
{
    D3D_SHADER_VARIABLE_CLASS Class;
    D3D_SHADER_VARIABLE_TYPE Type;
    UINT Rows;
    UINT Columns;
    UINT Elements;
    UINT Members;
    UINT Offset;
    const char *Name;
} D3D11_SHADER_TYPE_DESC;

typedef struct _D3D11_SHADER_BUFFER_DESC
{
    const char *Name;
    D3D_CBUFFER_TYPE Type;
    UINT Variables;
    UINT Size;
    UINT uFlags;
} D3D11_SHADER_BUFFER_DESC;

typedef struct _D3D11_SHADER_INPUT_BIND_DESC
{
    const char *Name;
    D3D_SHADER_INPUT_TYPE Type;
    UINT BindPoint;
    UINT BindCount;
    UINT uFlags;
    D3D_RESOURCE_RETURN_TYPE ReturnType;
    D3D_SRV_DIMENSION Dimension;
    UINT NumSamples;
} D3D11_SHADER_INPUT_BIND_DESC;

typedef struct _D3D11_SIGNATURE_PARAMETER_DESC
{
    const char *SemanticName;
    UINT SemanticIndex;
    UINT Register;
    D3D_NAME SystemValueType;
    D3D_REGISTER_COMPONENT_TYPE ComponentType;
    BYTE Mask;
    BYTE ReadWriteMask;
    UINT Stream;
#if D3D_COMPILER_VERSION >= 46
    D3D_MIN_PRECISION MinPrecision;
#endif
} D3D11_SIGNATURE_PARAMETER_DESC;

[
    object,
    local,
    uuid(6e6ffa6a-9bae-4613-a51e-91652d508c21)
]
interface ID3D11ShaderReflectionType
{
    HRESULT GetDesc(
        [out] D3D11_SHARED_TYPE_DESC *desc
    );

    ID3D11ShaderReflectionType *GetMemberTypeByIndex(
        [in] UINT index
    );

    ID3D11ShaderReflectionType *GetMemberTypeByName(
        [in] LPCSTR name
    );

    const char* GetMemberTypeName(
        [in] UINT index
    );

    HRESULT IsEqual(
        [in] ID3D11ShaderReflectionType* type
    );

    ID3D11ShaderReflectionType* GetSubType();
    
    ID3D11ShaderReflectionType* GetBaseClass();
    
    UINT GetNumInterfaces();
    
    ID3D11ShaderReflectionType* GetInterfaceByIndex(
        [in] UINT index
    );

    HRESULT IsOfType(
        [in] ID3D11ShaderReflectionType* type
    );

    HRESULT ImplementsInterface(
        [in] ID3D11ShaderReflectionType* base
    );
};

interface ID3D11ShaderReflectionConstantBuffer;

[
    local,
    object,
    uuid(51f23923-f3e5-4bd1-91cb-606177d8db4c)
]
interface ID3D11ShaderReflectionVariable
{
    HRESULT GetDesc(
        [out] D3D11_SHADER_VARIABLE_DESC *desc
    );

    ID3D11ShaderReflectionType* GetType();
    
    ID3D11ShaderReflectionConstantBuffer* GetBuffer();

    UINT GetInterfaceSlot(
        [in] UINT index
    );
};


[
    local,
    object,
    uuid(eb62d63d-93dd-4318-8ae8-c6f83ad371b8)
]
interface ID3D11ShaderReflectionConstantBuffer
{
    HRESULT GetDesc(
        [out] D3D11_SHADER_BUFFER_DESC *desc
    );

    ID3D11ShaderReflectionVariable* GetVariableByIndex(
        [in] UINT index
    );

    ID3D11ShaderReflectionVariable* GetVariableByName(
        [in] LPCSTR name
    );
};


[
    local,
    object,
    uuid(17f27486-a342-4d10-8842-ab6874e7f670)
]
interface ID3D11ShaderReflection42 : IUnknown
{
    HRESULT GetDesc(
        [out] D3D11_SHADER_DESC *desc
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByIndex(
        [in] UINT index
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDesc(
        [in] UINT index,
        [out] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    HRESULT GetInputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetOutputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetPatchConstantParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    ID3D11ShaderReflectionVariable* GetVariableByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDescByName(
        [in] LPCSTR name,
        [ouut] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    UINT GetMovInstructionCount();

    UINT GetMovcInstructionCount();

    UINT GetConversionInstructionCount();

    UINT GetBitwiseInstructionCount();

    D3D_PRIMITIVE GetGSInputPrimitive();

    BOOL IsSampleFrequencyShader();

    UINT GetNumInterfaceSlots();

    HRESULT GetMinFeatureLevel(
        [out] D3D_FEATURE_LEVEL *level
    );

    UINT GetThreadGroupSize(
        [out, optional] UINT *sizex,
        [out, optional] UINT *sizey,
        [out, optional] UINT *sizez
    );

    UINT64 GetRequiresFlags();
};

[
    local,
    object,
    uuid(0a233719-3960-4578-9d7c-203b8b1d9cc1)
]
interface ID3D11ShaderReflection43 : IUnknown
{
    HRESULT GetDesc(
        [out] D3D11_SHADER_DESC *desc
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByIndex(
        [in] UINT index
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDesc(
        [in] UINT index,
        [out] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    HRESULT GetInputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetOutputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetPatchConstantParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    ID3D11ShaderReflectionVariable* GetVariableByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDescByName(
        [in] LPCSTR name,
        [ouut] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    UINT GetMovInstructionCount();

    UINT GetMovcInstructionCount();

    UINT GetConversionInstructionCount();

    UINT GetBitwiseInstructionCount();

    D3D_PRIMITIVE GetGSInputPrimitive();

    BOOL IsSampleFrequencyShader();

    UINT GetNumInterfaceSlots();

    HRESULT GetMinFeatureLevel(
        [out] D3D_FEATURE_LEVEL *level
    );

    UINT GetThreadGroupSize(
        [out, optional] UINT *sizex,
        [out, optional] UINT *sizey,
        [out, optional] UINT *sizez
    );

    UINT64 GetRequiresFlags();
};

[
    local,
    object,
    uuid(8d536ca1-0cca-4956-a837-786963755584)
]
interface ID3D11ShaderReflection44 : IUnknown
{
    HRESULT GetDesc(
        [out] D3D11_SHADER_DESC *desc
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByIndex(
        [in] UINT index
    );

    ID3D11ShaderReflectionConstantBuffer *GetConstantBufferByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDesc(
        [in] UINT index,
        [out] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    HRESULT GetInputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetOutputParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    HRESULT GetPatchConstantParameterDesc(
        [in] UINT index,
        [out] D3D11_SIGNATURE_PARAMETER_DESC *desc
    );

    ID3D11ShaderReflectionVariable* GetVariableByName(
        [in] LPCSTR name
    );

    HRESULT GetResourceBindingDescByName(
        [in] LPCSTR name,
        [ouut] D3D11_SHADER_INPUT_BIND_DESC *desc
    );

    UINT GetMovInstructionCount();

    UINT GetMovcInstructionCount();

    UINT GetConversionInstructionCount();

    UINT GetBitwiseInstructionCount();

    D3D_PRIMITIVE GetGSInputPrimitive();

    BOOL IsSampleFrequencyShader();

    UINT GetNumInterfaceSlots();

    HRESULT GetMinFeatureLevel(
        [out] D3D_FEATURE_LEVEL *level
    );

    UINT GetThreadGroupSize(
        [out, optional] UINT *sizex,
        [out, optional] UINT *sizey,
        [out, optional] UINT *sizez
    );

    UINT64 GetRequiresFlags();
};

/*
    Allows for switching between different versions of ID3D11ShaderReflection
*/
cpp_quote("#if D3D_COMPILER_VERSION <= 42")
cpp_quote("typedef ID3D11ShaderReflection42 ID3D11ShaderReflection;")
cpp_quote("#define IID_ID3D11ShaderReflection IID_ID3D11ShaderReflection42")
cpp_quote("#elif D3D_COMPILER_VERSION == 43")
cpp_quote("typedef ID3D11ShaderReflection43 ID3D11ShaderReflection;")
cpp_quote("#define IID_ID3D11ShaderReflection IID_ID3D11ShaderReflection43")
cpp_quote("#else")
cpp_quote("typedef ID3D11ShaderReflection44 ID3D11ShaderReflection;")
cpp_quote("#define IID_ID3D11ShaderReflection IID_ID3D11ShaderReflection44")
cpp_quote("#endif")

[
    local,
    object,
    uuid(469e07f7-045a-48d5-aa12-68a478cdf75d)
]
interface ID3D11ModuleInstance : IUnknown
{
    HRESULT BindConstantBuffer(
        [in] UINT srcslot,
        [in] UINT dstslot,
        [in] UINT dstoffset
    );

    HRESULT BindConstantBufferByName(
        [in] LPCSTR name,
        [in] UINT dstslot,
        [in] UINT dstoffset
    );

    HRESULT BindResource(
        [in] UINT srcslot,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindResourceByName(
        [in] LPCSTR name,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindSampler(
        [in] UINT srcslot,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindSamplerByName(
        [in] LPCSTR name,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindUnorderedAccessView(
        [in] UINT srcslot,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindUnorderedAccessViewByName(
        [in] LPCSTR name,
        [in] UINT dstslot,
        [in] UINT count
    );
    
    HRESULT BindResourceAsUnorderedAccessView(
        [in] UINT srcslot,
        [in] UINT dstslot,
        [in] UINT count
    );

    HRESULT BindResourceAsUnorderedAccessViewByName(
        [in] LPCSTR name,
        [in] UINT dstslot,
        [in] UINT count
    );
};

[
    local,
    object,
    uuid(cac701ee-80fc-4122-8242-10b39c8cec34)
]
interface ID3D11Module : IUnknown
{
    HRESULT CreateInstance(
        [in, optional] LPCStR instnamespace,
        [out] ID3D11ModuleInstance** moduleinstance
    );
};

[
    local,
    object,
    uuid(59a6cd0e-e10d-4c1f-88c0-63aba1daf30e)
]
interface ID3D11Linker : IUnknown
{
    HRESULT AddClipPlaneFromCBuffer(
        [in] UINT bufferslot,
        [in] UINT bufferentry
    );

    HRESULT Link(
        [in] ID3D11ModuleInstance* instance,
        [in] LPCSTR instname,
        [in] LPCSTR targetname,
        [in] UINT flags,
        [out] ID3DBlob **shader,
        [out, optional] ID3DBlob **error
    );

    HRESULT UseLibrary(
        [in] ID3D11ModuleInstance *libinstance
    );
};
