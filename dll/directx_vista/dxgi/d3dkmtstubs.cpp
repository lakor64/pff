/*
 * PROJECT:     ReactX Graphics Infrastructure
 * COPYRIGHT:   See COPYING in the top level directory
 * PURPOSE:     D3DKMT API exports stubs
 * COPYRIGHT:   Copyright 2023 Christian Rendina <christian.rendina@gmail.com>
 */
#include "pch.h"

extern "C"
{
	NTSTATUS NTAPI D3DKMTGetDeviceState(_Inout_ D3DKMT_GETDEVICESTATE* ds)
	{
		if (ds->StateType == D3DKMT_DEVICESTATE_EXECUTION)
		{
			ds->ExecutionState = D3DKMT_DEVICEEXECUTION_ACTIVE;
		}
		else if (ds->StateType == D3DKMT_DEVICESTATE_PRESENT)
		{
			memset(&ds->PresentState, 0, sizeof(ds->PresentState));
		}
		else
			return STATUS_NOT_SUPPORTED;

		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTOpenAdapterFromHdc(_Inout_ D3DKMT_OPENADAPTERFROMHDC* hdc)
	{
		memset(hdc, 0, sizeof(*hdc));
		hdc->hAdapter = 0xF0F;
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTQueryAdapterInfo(_Inout_ CONST D3DKMT_QUERYADAPTERINFO* ai)
	{
		if (ai->Type == KMTQAITYPE_UMDRIVERNAME)
		{
			if (ai->PrivateDriverDataSize != sizeof(D3DKMT_UMDFILENAMEINFO))
				return STATUS_INVALID_PARAMETER;

			wcscpy(((D3DKMT_UMDFILENAMEINFO*)ai->pPrivateDriverData)->UmdFileName, L"dxgi.dll");
			((D3DKMT_UMDFILENAMEINFO*)ai->pPrivateDriverData)->Version = KMTUMDVERSION_DX10;
		}
		else if (ai->Type == KMTQAITYPE_UMDRIVERPRIVATE)
		{
			*((DWORD*)ai->pPrivateDriverData) = 0;
		}

		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTOpenResource(_Inout_ D3DKMT_OPENRESOURCE*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTPresent(_Inout_ D3DKMT_PRESENT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTQueryAllocationResidency(_In_ CONST D3DKMT_QUERYALLOCATIONRESIDENCY*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTQueryResourceInfo(_Inout_ D3DKMT_QUERYRESOURCEINFO*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTCloseAdapter(_In_ CONST D3DKMT_CLOSEADAPTER*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTRender(_Inout_ D3DKMT_RENDER*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTLock(_Inout_ D3DKMT_LOCK*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetAllocationPriority(_In_ CONST D3DKMT_SETALLOCATIONPRIORITY*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetContextSchedulingPriority(_In_ CONST D3DKMT_SETCONTEXTSCHEDULINGPRIORITY*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetDisplayMode(_In_ CONST D3DKMT_SETDISPLAYMODE*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetDisplayPrivateDriverFormat(_In_ CONST D3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetGammaRamp(_In_ CONST D3DKMT_SETGAMMARAMP*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSetVidPnSourceOwner(_In_ CONST D3DKMT_SETVIDPNSOURCEOWNER*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTSignalSynchronizationObject(_In_ CONST D3DKMT_SIGNALSYNCHRONIZATIONOBJECT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTUnlock(_In_ CONST D3DKMT_UNLOCK*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTWaitForSynchronizationObject(_In_ CONST D3DKMT_WAITFORSYNCHRONIZATIONOBJECT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTWaitForVerticalBlankEvent(_In_ CONST D3DKMT_WAITFORVERTICALBLANKEVENT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTCreateAllocation(_Inout_ D3DKMT_CREATEALLOCATION*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTCreateDevice(_Inout_ D3DKMT_CREATEDEVICE*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTCreateContext(_Inout_ D3DKMT_CREATECONTEXT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTCreateSyncrhonizationObject(_Inout_ D3DKMT_CREATESYNCHRONIZATIONOBJECT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTDestroyAllocation(_In_ CONST D3DKMT_DESTROYALLOCATION*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTDestroyContext(_In_ CONST D3DKMT_DESTROYCONTEXT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTDestroyDevice(_In_ CONST D3DKMT_DESTROYDEVICE*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTDestroySynchronizationObject(_In_ CONST D3DKMT_DESTROYSYNCHRONIZATIONOBJECT*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTGetContextSchedulingPriority(_Inout_ D3DKMT_GETCONTEXTSCHEDULINGPRIORITY*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTEscape(_Inout_ CONST D3DKMT_ESCAPE*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTGetDisplayModeList(_Inout_ D3DKMT_GETDISPLAYMODELIST*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTGetMultisampleMethodList(_Inout_ D3DKMT_GETMULTISAMPLEMETHODLIST*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTGetRuntimeData(_Inout_ CONST D3DKMT_GETRUNTIMEDATA*)
	{
		return STATUS_SUCCESS;
	}

	NTSTATUS NTAPI D3DKMTGetSharedPrimaryHandle(_Inout_ D3DKMT_GETSHAREDPRIMARYHANDLE*)
	{
		return STATUS_SUCCESS;
	}


	HRESULT WINAPI OpenAdapter10(void* pOpenData)
	{
#ifdef PFF_PROJ_DEBUG
		printf("OpenAdapter10: data %p\n", pOpenData);
		_CrtDbgBreak();
#endif
		return DXGI_ERROR_UNSUPPORTED;
	}

	HRESULT WINAPI OpenAdapter10_2(void* pOpenData)
	{
#ifdef PFF_PROJ_DEBUG
		printf("OpenAdapter10_2: data %p\n", pOpenData);
		_CrtDbgBreak();
#endif
		return DXGI_ERROR_UNSUPPORTED;
	}
}
