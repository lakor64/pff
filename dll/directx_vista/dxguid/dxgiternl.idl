/*
 * PROJECT:     ReactX Graphics Infrastructure
 * COPYRIGHT:   See COPYING in the top level directory
 * PURPOSE:     DXGI Internal
 * COPYRIGHT:   Copyright 2023 Christian Rendina <pizzaiolo100@proton.me>
 */

import "oaidl.idl";
import "ocidl.idl";
import "dxgi.idl";
import "usecounted.idl";

cpp_quote ("#ifndef _D3DKMTHK_H_")
/*
* UMD driver versions
*/
typedef enum _KMTUMDVERSION
{
	KMTUMDVERSION_DX9 = 0,
	KMTUMDVERSION_DX10 = 1,
	KMTUMDVERSION_DX11 = 2,
	KMTUMDVERSION_DX12 = 3,
	KMTUMDVERSION_DX12_WSA32 = 4,
	KMTUMDVERSION_DX12_WSA64 = 5,
	NUM_KMTUMDVERSIONS = 6
} KMTUMDVERSION;
cpp_quote ("#endif")

cpp_quote ("#ifndef _D3DUKMDT_H_")
/*
* D3DKMT Adapter handle
*/
typedef UINT D3DKMT_HANDLE;

/*
* D3DKMT VidPn handle
*/
typedef UINT D3DDDI_VIDEO_PRESENT_SOURCE_ID;
cpp_quote ("#endif")

cpp_quote ("#ifndef _DXGIDDI_H")
/*
* Blt mode rotation
*/
typedef enum _DXGI_DDI_MODE_ROTATION {
	DXGI_DDI_MODE_ROTATION_UNSPECIFIED,
	DXGI_DDI_MODE_ROTATION_IDENTITY,
	DXGI_DDI_MODE_ROTATION_ROTATE90,
	DXGI_DDI_MODE_ROTATION_ROTATE180,
	DXGI_DDI_MODE_ROTATION_ROTATE270
} DXGI_DDI_MODE_ROTATION;

typedef struct _DXGI_DDI_PRESENT_FLAGS {
	union {
		struct {
			UINT Blt : 1;
			UINT Flip : 1;
			UINT PreferRight : 1;
			UINT TemporaryMono : 1;
			UINT AllowTearing : 1;
			UINT AllowFlexibleRefresh : 1;
			UINT NoScanoutTransform : 1;
			UINT Reserved : 25;
		};
		UINT Value;
	};
} DXGI_DDI_PRESENT_FLAGS;

typedef enum _DXGI_DDI_FLIP_INTERVAL_TYPE {
	DXGI_DDI_FLIP_INTERVAL_IMMEDIATE,
	DXGI_DDI_FLIP_INTERVAL_ONE,
	DXGI_DDI_FLIP_INTERVAL_TWO,
	DXGI_DDI_FLIP_INTERVAL_THREE,
	DXGI_DDI_FLIP_INTERVAL_FOUR,
	DXGI_DDI_FLIP_INTERVAL_IMMEDIATE_ALLOW_TEARING
} DXGI_DDI_FLIP_INTERVAL_TYPE;
cpp_quote ("#endif")

cpp_quote ("#define DXGI_MAX_SURFACE_RESOURCES 16")

/*
* Shadow D3DKMT present function type
*/
typedef struct _D3DKMT_PRESENT* PD3DKMT_PRESENT;

/*
* DXGI Thunk versions, this are sent to the UDM for direct D3DKMT access
*/
typedef enum _DXGI_THUNKS_VERSION
{
	DXGI_THUNKS_VERSION_NONE = 0,
	DXGI_THUNKS_VERSION_1 = 1,
	DXGI_THUNKS_VERSION_2 = 2,
	DXGI_THUNKS_VERSION_3 = 3,
	DXGI_THUNKS_VERSION_4 = 4,
} DXGI_THUNKS_VERSION;

typedef struct _DXGI_PRESENT_SUBRESOURCE
{
	UINT SrcSubresource;
	UINT DstSubresource;
} DXGI_PRESENT_SUBRESOURCE;

typedef struct _DXGI_PRESENT_SUBRESOURCES
{
	DWORD Count;
	DXGI_PRESENT_SUBRESOURCE* SubRes;
} DXGI_PRESENT_SUBRESOURCES;

/*
* Internal capabilities of an adapter
*/
typedef struct _DXGI_ADAPTER_CAPABILITIES
{
	// TODO: Discover
	char unk;
} DXGI_ADAPTER_CAPABILITIES;

typedef struct _DXGI_PRESENTSURFACE
{
	ULONG Version;
} DXGI_PRESENTSURFACE;

typedef enum _DXGI_DEVICE_PRESENT_FLAGS
{
	DXGI_DEVICE_PRESENT_FLAGS_NONE = 0x0,
	DXGI_DEVICE_PRESENT_FLAGS_UNKNOWN = 0x1,
	DXGI_DEVICE_PRESENT_FLAGS_UNKNOWN_2 = 0x2,
	// as of Windows 7 SP1
} DXGI_DEVICE_PRESENT_FLAGS;

typedef enum _DXGI_RESOURCE_BIND_FLAGS
{
	DXGI_RESOURCE_BIND_NONE						= 0x000000,
	// if you pass 0x1 or 0x2 the function fails
	DXGI_RESOURCE_BIND_STAGING					= 0x000003, // cannot work with misc flag 0x8000
	DXGI_RESOURCE_BIND_SHADER_RESOURCE			= 0x000010,
	DXGI_RESOURCE_BIND_RENDER_TARGET			= 0x000020,
	DXGI_RESOURCE_BIND_UNKNOWN					= 0x000040, // does something with the format?
	DXGI_RESOURCE_BIND_UNKNOWN_2				= 0x000100, // cannot work with misc flag 0x8000
	DXGI_RESOURCE_BIND_UNORDERED_ACCESS			= 0x000400,
	DXGI_RESOURCE_BIND_GDI_ACCESS				= 0x100000,
} DXGI_RESOURCE_BIND_FLAGS;

typedef enum _DXGI_RESOURCE_MISC_FLAGS
{
	DXGI_RESOURCE_MISC_FLAG_NONE							= 0x000000,
	DXGI_RESOURCE_MISC_FLAG_SHARED							= 0x000080,
	DXGI_RESOURCE_MISC_FLAG_UNKNOWN							= 0x000200, // this is actually 0x08 in D3D11_RESOURCE_MISC_FLAG 
	DXGI_RESOURCE_MISC_FLAG_UNKNOWN_2						= 0x008000,
	DXGI_RESOURCE_MISC_RESTRICTED_CONTENT					= 0x010000,
	DXGI_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVE		= 0x040000,
	DXGI_RESOURCE_MISC_FLAG_SHARED_NTHANDLE					= 0x020000,
	DXGI_RESOURCE_MISC_FLAG_UNKNOWN_3						= 0x200000, // cannot work with SHARED
} DXGI_RESOURCE_MISC_FLAGS;

typedef struct _DXGI_SWAP_POOL_DESC
{
	/*
	* Undocumented as it's not implemented inside Windows 7 DXGI.DLL
	*/
	BYTE unk;
} DXGI_SWAP_POOL_DESC;

[
	object,
	local,
	uuid(a2a9f815-4778-40d1-b179-d5d3a1a5f1bc)
]
/*
* Producer for debug logging
*/
interface IDXGIDebugProducer : IUnknown
{
	HRESULT DumpProducer(
		void
	);

	HRESULT DumpObject(
		IUnknown*
	);

	HRESULT GetSummaryInfoQueueMessageID(
		int*
	);
}

[
	object,
	local,
	uuid(d75fab3e-73b6-4fdf-a47e-f35ca18a7dbf)
]
/*
* Internal swapchain data
*/
interface IDXGISwapChainInternal : IUnknown
{
	HRESULT AcquireBuffer(
		[in] IDXGIResource* Resource,
		[in] UINT unk
	);
};

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-fffffffffffa) // TODO: this UUID is invalid
]
interface IDXGISwapChainTest : IUnknown
{
	HRESULT HasProxyFrontBufferSurface(

	);

	HRESULT GetFrameStatisticsTest(

	);

	HRESULT EmulateXBOXBehavior(

	);

	HRESULT GetColorSpace1(

	);

	HRESULT GetBufferLayoutInfoTest(

	);

	HRESULT GetDFlipOutput(

	);

	HRESULT GetBackBufferImplicitRotationCount(

	);
};

[
	local,
	object,
	uuid(79d2046c-22ef-451b-9e74-2245d9c760ea)
]
/*
* Internal resource data
*/
interface IDXGIResourceInternal2 : IUnknown // TODO: is there any IDXGIResourceInternal1 and 0?
{
	HRESULT GetDDIHandle(
		void**
	);

	HRESULT GetPrimaryDesc(
		void*,
		UINT64*
	);

	BOOL IsDCOutstanding(
		void
	);

	void* GetSharedHandleInternal(
		void
	);

	HRESULT GetGlobalHandles(
		void**,
		void**,
		void**
	);

	HRESULT CreateSharedHandleInternal(
		const SECURITY_ATTRIBUTES* SecAttr,
		ULONG,
		const USHORT*,
		void**
	);
};


[
	object,
	local,
	uuid(bbfeb1e3-6f00-4ad0-a003-dc3c98c415e8) // ok! (dxgi.dll windows vista rtm)
]
/*
* Internal data of an adapter (Windows Vista RTM)
*/
interface IDXGIAdapterInternal : IUnknown
{
	HRESULT GetUMDDeviceSize(
		[in] UINT unk,
		[in] UINT unk2,
		[in] UINT unk3
	);
}

[
	object,
	local,
	uuid(712bd56d-86ff-4b71-91e1-c13b274ff2a2) // ok! (dxgi.dll windows 7)
]
interface IDXGIAdapterUnknownInternal : IUnknown
{
	HRESULT CloseKernelHandle(
		[in] D3DKMT_HANDLE* pHandle
	);
};


[
	object,
	local,
	uuid(7abb6563-02bc-47c4-8ef9-acc4795edbcf) // ok! (dxgi.dll windows 7)
]
/*
* Internal data of an adapter (Windows 7 SP1+)
*/
interface IDXGIAdapterInternal2 : IDXGIAdapterInternal
{
	HRESULT LoadUMD(
		[in] KMTUMDVERSION Version,
		[out] HINSTANCE* hUmdDLL
	);

	HRESULT InstanceThunks(
		[in] DXGI_THUNKS_VERSION Version,
		[out] D3DKMT_HANDLE* pHandle,
		[in] UINT ThunksVer,
		[in][out][optional] void* Thunks
	);
	

	HRESULT RetireUsage(
		[in] D3DKMT_HANDLE Adapter
	);
	

	HRESULT SetAdapterCapabilities(
		[in] DXGI_ADAPTER_CAPABILITIES* Capabilities
	);
	

	HRESULT GetAdapterCapabilities(
		[out] DXGI_ADAPTER_CAPABILITIES* Capabilities
	);
	

	BOOL IsWARP(
		void
	);
	// --


	D3DDDI_VIDEO_PRESENT_SOURCE_ID GetPrimaryVidPnSourceId(
		void
	);

	UINT WddmVersion(
		void
	);

	BOOL MismatchedVendorLda(
		void
	);

	BOOL IsLda(
		void
	);
}

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-ffffffffffe8) // TODO: THIS IS AN INVALID UUID
]
interface IDXGIFenceInternal : IUnknown
{

};

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-ffffffffffe9) // TODO: this UUID is invalid
]
interface IDXGIDeviceTest : IUnknown
{
	HRESULT CheckPresentDurationSupport(

	);
}

[
	object,
	local,
	uuid(5a92ae4f-81fa-4cac-a1d8-ae479ac581cd)
]
/*
* Internal device data (Windows Vista RTM)
*/
interface IDXGIDeviceInternal : IUnknown
{
	HRESULT Present(
		[in] IDXGISurface*,
		[in] /*[optional]*/ IDXGISurface*,
		[in] PD3DKMT_PRESENT pPresentInfo,
		[in] UINT,
		[in] UINT
	);

	HRESULT RotateResourceIdentities(
		IDXGISurface*,
		const IDXGISurface**,
		UINT
	);

	HRESULT GetContextResolver(
		void**
	);

	HRESULT CreateSurfaceInternal(
		IUseCounted*,
		const DXGI_SURFACE_DESC* pDesc,
		UINT,
		UINT,
		void*,
		[out] IDXGISurface** pOutput
	);

	HRESULT Blt(
		IDXGISurface*,
		const RECT*,
		IDXGISurface*,
		RECT*,
		UINT64,
		UINT,
		UINT
	);

	HRESULT SetDisplayMode(
		IDXGISurface*
	);

	HRESULT GetGammaCaps(
		DXGI_GAMMA_CONTROL_CAPABILITIES*
	);

	HRESULT OpenSharedResource(
		void*,
		int,
		REFIID,
		void**
	);

	BOOL IsValidScanoutFormat(
		DXGI_FORMAT Format
	);
}


[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-ffffffffffef) // TODO: THIS IS AN INVALID UUID
]
interface IDXGIDeviceInternal2 : IDXGIDeviceInternal
{
	HRESULT FlushDeletion(
		IDXGISurface*,
		const IDXGISurface**,
		UINT
	);
}

[
	object,
	local,
	uuid(f74ee86f-7270-48e8-9d63-38af75f22d57)
]
/*
* Internal device for Windows7+
*/
interface IDXGIDeviceInternal3 : IUnknown
{
#if 1 // WINDOWS 7
	HRESULT Present(
		IDXGIResource* pSource,
		IDXGIResource* pDestination,
		void* dxgiContext, // D3DKMT_PRESENT
		DXGI_DDI_PRESENT_FLAGS PresentFlags,
		DXGI_DDI_FLIP_INTERVAL_TYPE FlipInterval
	);

	HRESULT RotateResourceIdentities(
		IDXGIResource*,
		const IDXGIResource**,
		UINT
	);

	HRESULT GetContextResolver(
		void**
	);

	HRESULT CreateSurfaceInternal(
		[in] IUseCounted2*,
		[in] /*[optional]*/ IUseCounted2* LayeredCount, // ID3D11LayeredUseCounted *
		[in] /*[optional]*/ void*,
		[in] const DXGI_SURFACE_DESC* pDesc,
		[in] UINT TextureArraySize,
		// max size is 16
		[in] UINT ResourceSize,
		[in] UINT BindFlags,
		[in] UINT MiscFlags,
		/*[optional]*/ void*,
		[out] IDXGIResource** pResources
	);

	HRESULT Blt(
		// source surface
		[in] IDXGIResource* Src,
		// if you pass this parameter you want to apply a custom source rect rather than the one retrived from the surface
		[in]/*[optional]*/ const RECT* SrcRect,
		// an array of rects, if it's null the default rect from SrcRect or Src will be applied
		[in]/*[optional]*/ const RECT* SubResRect,
		// number of SubResRect
		[in] UINT SubResRectSize,
		// destination surface
		[in] IDXGIResource* Dest,
		// if you pass this parameter as not null you want to apply a custom destination rect rather than the one retrived from the surface
		[in]/*[optional]*/ RECT* DestRect,
		// sub resources
		const DXGI_PRESENT_SUBRESOURCES* SubRes,
		// unknown
		UINT64,
		// Present flags
		UINT Flags, // DXGI_DEVICE_PRESENT_FLAGS
		// Rotation mode
		UINT RotationMode // DXGI_DDI_MODE_ROTATION
	);

	HRESULT SetDisplayMode(
		IDXGIResource*
	);

	HRESULT GetGammaCaps(
		DXGI_GAMMA_CONTROL_CAPABILITIES*
	);

	HRESULT OpenSharedResource(
		[in] HANDLE hResource,
		[in] int,
		[in] REFIID ResType,
		[out] void** DXGIResourceOut
	);

	BOOL IsValidScanoutFormat(
		DXGI_FORMAT Format
	);

	HRESULT FlushDeletion(
		IDXGIResource*,
		const IDXGIResource**,
		UINT,
		UINT // DXGI_INTERNAL_FLUSH_DELETION_REASON
	);

	HRESULT GetContentProtection(
		void
	);

	HRESULT CreateTrackedFence(
		UINT64,
		const SECURITY_ATTRIBUTES*,
		ULONG,
		void**, // DXGI_INTENRAL_TRACKED_FENCE
		void**
	);
	// TODO: vftable claims there are three of this? to verify

	HRESULT Flush(
		UINT
	);

	HRESULT AcquireResource(
		IDXGIResource*
	);

	HRESULT ReleaseResource(
		IDXGIResource*
	);

	HRESULT GetCaps(
		void
	);

	HRESULT GetDesc(
		IDXGIResource*,
		DXGI_SURFACE_DESC*,
		UINT*
	);

	HRESULT Map( // this doesn't seem to return an HRESULT! Seems to return an array of 3 pointers!
		IDXGIResource*,
		UINT,
		DXGI_MAPPED_RECT*,
		UINT
	);

	HRESULT Unmap(
		IDXGIResource*,
		UINT
	);

	HRESULT CheckDirectFlipSupport(
		UINT,
		IDXGIResource*,
		IDXGIResource*,
		INT*
	);

	HRESULT GetDeviceRemovedReason(
		void
	);

	HRESULT GetFlipExSemaphoreHandle(
		void
	);

	HRESULT ValidateGetDisplaySurfaceDataDest(
		IDXGIDebugProducer*,
		UINT,  // DXGI_GETDISPLAYSURFACEDATA_VERSION
		IDXGIResource*
	);
#else // WINDOWS 10+
	HRESULT Present(const DXGI_PRESENTSURFACE*, UINT, IDXGIResource*, void*, UINT, UINT, UINT*);
	HRESULT RotateResourceIdentities(IDXGIResource*, IDXGIResource* const*, UINT);
	HRESULT GetContextResolver(void**);
	HRESULT CreateSurfaceInternal(IDXGISwapChainInternal*, IUseCounted2*, void*, const DXGI_SURFACE_DESC*, UINT, UINT, UINT, UINT, void*, IDXGIResource**);
	HRESULT Blt(IDXGIResource*, const RECT*, const RECT*, UINT, IDXGIResource*, const RECT*, /*const SUBRESOURCE_BLT_MAP**/ void*, ULONGLONG, UINT, UINT);
	HRESULT SetDisplayMode(IDXGIResource*);
	HRESULT GetGammaCaps(DXGI_GAMMA_CONTROL_CAPABILITIES*);
	HRESULT OpenSharedResource(void*, int, REFIID, void**);
	HRESULT IsValidScanoutFormat(DXGI_FORMAT);
	HRESULT FlushDeletion(IDXGIResource*, const IDXGIResource**, UINT, /*DXGI_INTERNAL_FLUSH_DELETION_REASON*/ UINT);
	HRESULT GetContentProtection();
	HRESULT Flush(UINT);
	HRESULT AcquireResource(IDXGIResource*);
	HRESULT ReleaseResource(IDXGIResource*);
	HRESULT GetCaps();
	HRESULT GetDesc(IDXGIResource*, DXGI_SURFACE_DESC*, UINT*);
	HRESULT Map(IDXGIResource*, UINT, DXGI_MAPPED_RECT*, UINT);
	HRESULT Unmap(IDXGIResource*, UINT);
	HRESULT CheckDirectFlipSupport(UINT, IDXGIResource*, IDXGIResource*, int*);
	HRESULT GetDeviceRemovedReason();
	HRESULT GetFlipExSemaphoreHandle();
	HRESULT ValidateGetDisplaySurfaceDataDest(IDXGIDebugProducer*, /*DXGI_GETDISPLAYSURFACEDATA_VERSION*/ UINT, IDXGIResource*);
	HRESULT EnsureChildDevice(IDXGIAdapter*, /*DXGI_INTERNAL_CHILD_DEVICE_TYPE*/ UINT);
	HRESULT GetChildDevice(/*DXGI_INTERNAL_CHILD_DEVICE_TYPE*/ UINT);
	HRESULT GetMultiplaneOverlayCaps(UINT, /*DXGI_MULTIPLANE_OVERLAY_CAPS**/void*, int*);
	HRESULT GetMultiplaneOverlayGroupCaps(UINT, UINT, /*DXGI_INTERNAL_MULTIPLANE_OVERLAY_GROUP_CAPS**/ void*);
	HRESULT CheckMultiplaneOverlaySupport(IDXGIResource*, UINT, /*const DXGI_CHECK_MULTIPLANEOVERLAYSUPPORT_PLANE_INFO**/ void*, int*, int*, void*);
	HRESULT PresentMultiplaneOverlay(IDXGIResource*, UINT, /*const DXGI_PRESENT_MULTIPLANE_OVERLAY**/ void*, void*);
	HRESULT OpenSharedResource1(void*, REFIID, void**);
	HRESULT CheckPresentDurationSupport(UINT, UINT, UINT*, UINT*);
	HRESULT RemoveDevice(long);
	HRESULT SetMarkerIfRenderInstrumentationEnabled(/*DXGI_INTERNAL_MARKER_OP*/ UINT);
	HRESULT LogDroppedAPICallIfEnabled(/*DXGI_INTERNAL_MARKER_OP*/ UINT);
	HRESULT DriverSupportsOverlays();
	HRESULT DeviceCompletedHWNDFullscreenTransition();
	HRESULT SetHardwareProtection(IDXGIResource*, int);
	HRESULT CheckCompositionColorSpaceSupport(DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, int*);
	HRESULT CheckMultiPlaneOverlayColorSpaceSupport(UINT, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, int*);
	HRESULT IsXBOX(void);
	HRESULT GetHardwareProtectionCaps(int*, int*);
	HRESULT SetTransitionalPrimaryResource(IDXGIResource*);
	HRESULT ResolveSharedResource(IDXGIResource*);
	HRESULT IsMaximumFrameLatencyReached(UINT);
	HRESULT CreateFence(ULONGLONG, UINT, IDXGIFenceInternal**);
	HRESULT OpenFence(void*, IDXGIFenceInternal**);
	HRESULT WaitForFence(IDXGIFenceInternal*, ULONGLONG, UINT);
	HRESULT SetPresentPostSignal(IDXGIFenceInternal*, ULONGLONG, int);
	HRESULT QueryScanoutCaps(IDXGIResource*, UINT, UINT, UINT, /*DXGI_INTERNAL_SCANOUT_FLAGS**/ UINT);
#endif
}

[
	object,
	local,
	uuid(a8bf320a-6e96-4096-9ac7-d7630fb5d81e)
]
// TODO: Is there 1?
interface IDXGIResourceInternal3 : IUnknown
{
	HRESULT GetDDIHandle(

	);

	HRESULT GetPrimaryDesc(

	);

	HRESULT IsDCOutstanding(

	);

	HRESULT GetSharedHandleInternal(

	);

	HRESULT GetGlobalHandles(

	);

	HRESULT CreateSharedHandleInternal(

	);
};

[
	object,
	local,
	uuid(d1ed7b7c-f03c-4b2a-bbeb-6415dbe54938)
]
interface IDXGIFactoryInternal : IUnknown
{
	HRESULT CreateSwapPoolInternal(
		[in] IUnknown*,
		[in] const DXGI_SWAP_POOL_DESC* pDesc

	);

	HRESULT RegisterStereoStatusWinRTDisplayPropertiesCB(
		[in] void* pCB
	);

	HRESULT UnregisterStereoStatusWinRTDisplayPropertiesCB(
		void
	);

};
