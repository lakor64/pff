/*
 * PROJECT:     ReactX Graphics Infrastructure
 * COPYRIGHT:   See COPYING in the top level directory
 * PURPOSE:     Internal structures for DXGI
 * COPYRIGHT:   Copyright 2023 Christian Rendina <christian.rendina@gmail.com>
 */

import "oaidl.idl";
import "ocidl.idl";
import "dxgi.idl";

cpp_quote ("#ifndef _D3DKMTHK_H_")
typedef enum _KMTUMDVERSION
{
	KMTUMDVERSION_DX9 = 0,
	KMTUMDVERSION_DX10 = 1,
	KMTUMDVERSION_DX11 = 2,
	KMTUMDVERSION_DX12 = 3,
	KMTUMDVERSION_DX12_WSA32 = 4,
	KMTUMDVERSION_DX12_WSA64 = 5,
	NUM_KMTUMDVERSIONS = 6
} KMTUMDVERSION;
cpp_quote ("#endif")

cpp_quote ("#ifndef _D3DUKMDT_H_")
typedef UINT D3DKMT_HANDLE;
typedef UINT D3DDDI_VIDEO_PRESENT_SOURCE_ID;
cpp_quote ("#endif")

typedef struct _D3DKMT_PRESENT* PD3DKMT_PRESENT;

typedef enum _DXGI_THUNKS_VERSION
{
	DXGI_THUNKS_VERSION_NONE = 0,
	DXGI_THUNKS_VERSION_1 = 1,
	DXGI_THUNKS_VERSION_2 = 2,
	DXGI_THUNKS_VERSION_3 = 3,
	DXGI_THUNKS_VERSION_4 = 4,
} DXGI_THUNKS_VERSION;

typedef struct _DXGI_PRESENTSURFACE
{
	ULONG Version;
} DXGI_PRESENTSURFACE;

typedef struct _DXGI_ADAPTER_CAPABILITIES
{
	// TODO: Discover
	char unk;
} DXGI_ADAPTER_CAPABILITIES;

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-ffffffffffff) // TODO: THIS IS AN INVALID UUID
]
interface IUseCounted : IUnknown
{
	ULONG UCAddUse(
		void
	);

	ULONG UCReleaseUse(
		void
	);

	HRESULT UCBreakCyclicReferences(
		void
	);

	HRESULT UCEnstablishCyclicReferences(
		void
	);

	HRESULT UCDestroy(
		void
	);
};

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-fffffffffffe) // TODO: THIS IS AN INVALID UUID
]
interface IUseCounted2 : IUseCounted
{
	HRESULT UCQueryInterface(
		[in] UINT flags,
		[in] REFIID riid,
		[out] void** ppObj
	);
};

[
	object,
	local,
	uuid(bbfeb1e3-6f00-4ad0-a003-dc3c98c415e8)
]
interface IDXGIAdapterInternal : IUnknown
{
	HRESULT GetUMDDeviceSize(
		[in] UINT unk,
		[in] UINT unk2,
		[in] UINT unk3
	);
}

[
	object,
	local,
	uuid(712bd56d-86ff-4b71-91e1-c13b274ff2a2) // TODO: verify when we find what export this
]
interface IDXGIAdapterInternal1 : IDXGIAdapterInternal
{
	// TODO: We don't know the members and differences between this and the 2...
};

[
	object,
	local,
	uuid(7abb6563-02bc-47c4-8ef9-acc4795edbcf) // TODO: Verify again
]
interface IDXGIAdapterInternal2 : IDXGIAdapterInternal1
{
	HRESULT LoadUMD(
		[in] KMTUMDVERSION Version,
		[out] HINSTANCE* hUmdDLL
	);

	HRESULT InstanceThunks(
		[in] DXGI_THUNKS_VERSION Version,
		[out] D3DKMT_HANDLE* pHandle,
		[in] UINT ThunksVer,
		[in] [out] [optional] void* Thunks
	);

	HRESULT RetireUsage(
		[in] D3DKMT_HANDLE Adapter
	);

	HRESULT SetAdapterCapabilities(
		[in] DXGI_ADAPTER_CAPABILITIES* Capabilities
	);

	HRESULT GetAdapterCapabilities(
		[out] DXGI_ADAPTER_CAPABILITIES* Capabilities
	);

	BOOL IsWARP(
		void
	);

	D3DDDI_VIDEO_PRESENT_SOURCE_ID GetPrimaryVidPnSourceId(
		void
	);

	UINT WddmVersion(
		void
	);

	BOOL MismatchedVendorLda(
		void
	);

	BOOL IsLda(
		void
	);
}

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-fffffffffffd) // TODO: THIS IS AN INVALID UUID
]
interface IDXGISwapChainInternal : IUnknown
{
	HRESULT AcquireBuffer(
		[in] IDXGIResource* Resource,
		[in] UINT unk
	);

	HRESULT GetResourceParent(
		[in] REFIID iid,
		[out] void** pOut
	);

	HRESULT GetCurrentCommandQueue(
		[in] REFIID iid,
		[out] void** pOut
	);
};


[
	object,
	local,
	uuid(9b7e4a00-342c-4106-a19f-4f2704f689f0)
]
interface IDXGIDebugProducer : IUnknown
{
	HRESULT DumpProducer(
		void
	);

	HRESULT DumpObject(
		IUnknown*
	);

	HRESULT GetSummaryInfoQueueMessageID(
		int*
	);
}

[
	object,
	local,
	uuid(5a92ae4f-81fa-4cac-a1d8-ae479ac581cd)
]
interface IDXGIDeviceInternal : IUnknown
{
	HRESULT Present(
		[in] IDXGISurface*,
		[in] /*[optional]*/ IDXGISurface*,
		[in] PD3DKMT_PRESENT pPresentInfo,
		[in] UINT,
		[in] UINT
	);

	HRESULT RotateResourceIdentities(
		IDXGISurface*,
		const IDXGISurface**,
		UINT
	);

	HRESULT GetContextResolver(
		void**
	);

	HRESULT CreateSurfaceInternal(
		IUseCounted*,
		const DXGI_SURFACE_DESC* pDesc,
		UINT,
		UINT,
		void*,
		[out] IDXGISurface** pOutput
	);

	HRESULT Blt(
		IDXGISurface*,
		const RECT*,
		IDXGISurface*,
		RECT*,
		UINT64,
		UINT,
		UINT
	);

	HRESULT SetDisplayMode(
		IDXGISurface*
	);

	HRESULT GetGammaCaps(
		DXGI_GAMMA_CONTROL_CAPABILITIES*
	);

	HRESULT OpenSharedResource(
		void*,
		int,
		REFIID,
		void**
	);

	BOOL IsValidScanoutFormat(
		DXGI_FORMAT Format
	);
};

[
	object,
	local,
	uuid(ffffffff-ffff-ffff-ffff-fffffffffffa) // TODO: THIS IS AN INVALID UUID
]
interface IDXGIDeviceInternal2 : IDXGIDeviceInternal
{
	HRESULT FlushDeletion(
		IDXGISurface*, 
		const IDXGISurface**,
		UINT
	);
};

//#if 0
/*HRESULT Present(
	[in] const DXGI_PRESENTSURFACE* pSurfaceInfo,
	UINT,
	IDXGIResource*,
	void*,
	UINT,
	UINT,
	UINT
);*/
//#endif

[
	object,
	local,
	uuid(f74ee86f-7270-48e8-9d63-38af75f22d57)
]
// this does not inherate from IDXGIDeviceInternal2 because it breaks compatibily in the API
// NOTE: this is the WINDOWS 7 VERSION OF THIS INTERNAL DEVICE!
interface IDXGIDeviceInternal3 : IUnknown
{
	HRESULT Present(
		IDXGIDebugProducer* pDebugProducer,
		IDXGIResource*,
		void* pPresent, // D3DKMT_PRESENT
		UINT,
		UINT
	);

	HRESULT RotateResourceIdentities(
		IDXGIResource*,
		const IDXGIResource**,
		UINT
	);

	HRESULT GetContextResolver(
		void**
	);

	HRESULT CreateSurfaceInternal(
		[in] IUseCounted2* SwapChain,
		[in] /*[optional]*/ IUseCounted2*,
		[in] /*[optional]*/ void*, //IDXGISwapBufferInternal*
		[in] const DXGI_SURFACE_DESC* pDesc,
		[in] UINT TextureArraySize,
		[in] UINT ResourceSize,
		[in] UINT BindFlags,
		[in] UINT MiscFlags,
		/*[optional]*/ void*,
		[out] [optional] IDXGIResource** pResourceArray
	);

	HRESULT Blt(
		[in] IDXGIResource* Src,
		[in] const RECT*,
		[in] const RECT* SrcRect,
		[in] UINT,
		[in] IDXGIResource* Dest,
		[in] RECT* DestRect,
		const void*, // SUBRESOURCE_BLT_MAP
		UINT64,
		UINT,
		UINT
	);

	HRESULT SetDisplayMode(
		IDXGIResource*
	);

	HRESULT GetGammaCaps(
		DXGI_GAMMA_CONTROL_CAPABILITIES*
	);

	HRESULT OpenSharedResource(
		[in] HANDLE hResource,
		[in] int,
		[in] REFIID ResType,
		[out] void** DXGIResourceOut
	);

	BOOL IsValidScanoutFormat(
		DXGI_FORMAT Format
	);

	HRESULT FlushDeletion(
		IDXGIResource*,
		const IDXGIResource**,
		UINT,
		UINT // DXGI_INTERNAL_FLUSH_DELETION_REASON
	);

	HRESULT GetContentProtection(
		void
	);

	HRESULT CreateTrackedFence(
		UINT64,
		const SECURITY_ATTRIBUTES*,
		ULONG,
		void**, // DXGI_INTENRAL_TRACKED_FENCE
		void**
	); 
	// TODO: vftable claims there are three of this? to verify

	HRESULT Flush(
		UINT
	);

	HRESULT AcquireResource(
		IDXGIResource*
	);

	HRESULT ReleaseResource(
		IDXGIResource*
	);

	HRESULT GetCaps(
		void
	);

	HRESULT GetDesc(
		IDXGIResource*,
		DXGI_SURFACE_DESC*,
		UINT*
	);

	HRESULT Map( // this doesn't seem to return an HRESULT! Seems to return an array of 3 pointers!
		IDXGIResource*,
		UINT,
		DXGI_MAPPED_RECT*,
		UINT
	);

	HRESULT Unmap(
		IDXGIResource*,
		UINT
	);

	HRESULT CheckDirectFlipSupport(
		UINT,
		IDXGIResource*,
		IDXGIResource*,
		INT*
	);

	HRESULT GetDeviceRemovedReason(
		void
	);

	HRESULT GetFlipExSemaphoreHandle(
		void
	);

	HRESULT ValidateGetDisplaySurfaceDataDest(
		IDXGIDebugProducer*,
		UINT,  // DXGI_GETDISPLAYSURFACEDATA_VERSION
		IDXGIResource *
	);
	
}

[
	local,
	object,
	uuid(79d2046c-22ef-451b-9e74-2245d9c760ea)
]
interface IDXGIResourceInternal2 : IUnknown // NOTE: is there any IDXGIResourceInternal1 and 0?
{
	HRESULT GetDDIHandle(
		void**
	);

	HRESULT GetPrimaryDesc(
		void*,
		UINT64*
	);

	BOOL IsDCOutstanding(
		void
	);

	void* GetSharedHandleInternal(
		void
	);

	HRESULT GetGlobalHandles(
		void**,
		void**,
		void**
	);

	HRESULT CreateSharedHandleInternal(
		const SECURITY_ATTRIBUTES* SecAttr,
		ULONG,
		const USHORT*,
		void**
	);

};
